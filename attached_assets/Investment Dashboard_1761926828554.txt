<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>BiriGashi Investment Tracker</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/lucide/0.379.0/cdn.min.js" />
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            'blue-600': '#2563eb',
            'yellow-500': '#eab308',
            'green-500': '#10b981',
            'red-500': '#ef4444'
          }
        }
      }
    }
  </script>
  <style>
    .scrollable-table { overflow-x: auto; }
    .investor-card { min-width: 120px; }
  </style>
</head>
<body class="bg-gray-50 min-h-screen pb-6">

  <!-- Header -->
  <header class="bg-white shadow-sm sticky top-0 z-10">
    <div class="px-4 py-3 flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-blue-600 mr-2 lucide lucide-home">
        <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
        <polyline points="9 22 9 12 15 12 15 22"></polyline>
      </svg>
      <div>
        <h1 class="font-bold text-gray-900">BiriGashi Tracker</h1>
        <p class="text-xs text-gray-500">Compact investment dashboard</p>
      </div>
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ml-auto text-yellow-500 lucide lucide-alert-circle">
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="12" y1="8" x2="12" y2="12"></line>
        <line x1="12" y1="16" x2="12.01" y2="16"></line>
      </svg>
    </div>
  </header>

  <main class="px-4 py-4 space-y-5">
    <!-- Upcoming + Pie Chart -->
    <section>
      <h2 class="text-sm font-semibold text-gray-700 mb-2 flex items-center">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-yellow-500 mr-1.5 lucide lucide-alert-circle">
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="8" x2="12" y2="12"></line>
          <line x1="12" y1="16" x2="12.01" y2="16"></line>
        </svg>
        Due within 30 days
      </h2>
      <div class="flex flex-col md:flex-row gap-4">
        <!-- Investor Cards -->
        <div class="overflow-x-auto pb-2 -mx-2 px-2 flex-shrink-0 md:w-2/3">
          <div class="flex space-x-3 min-w-max" id="upcoming-container">
            <!-- Filled by JS -->
          </div>
        </div>

        <!-- Pie Chart -->
        <div class="bg-white rounded-lg border p-3 flex-shrink-0 md:w-1/3 h-40 flex flex-col">
          <div class="text-xs font-medium text-gray-700 mb-1">Payment Status</div>
          <canvas id="paymentPieChart" class="flex-1"></canvas>
          <div class="text-xs text-gray-600 mt-1" id="total-text">Total: $0</div>
        </div>
      </div>
    </section>

    <!-- Property Tables -->
    <section class="space-y-3" id="properties-container">
      <!-- Filled by JS -->
    </section>
  </main>

  <script>
    // Data from Excel
    const properties = [
      {
        id: 'kindaruma',
        name: 'Kindaruma Homes',
        unit: 'One-Bed+StudyRoom (B301)',
        totalUSD: 66747,
        investors: ['AA', 'HH', 'MY'],
        payments: [
          { type: '1 Bed + Study Apt', amount: 55641, dueDate: null, status: 'Fully Paid', paidBy: { AA: true, HH: true, MY: true } },
          { type: 'Developer Legal', amount: 3625, dueDate: null, status: 'Fully Paid', paidBy: { AA: true, HH: true, MY: true } },
          { type: 'JWG Legal', amount: 2309, dueDate: null, status: 'Fully Paid', paidBy: { AA: true, HH: true, MY: true } },
          { type: 'Furnishing', amount: 5172, dueDate: null, status: 'Fully Paid', paidBy: { AA: true, HH: true, MY: true } }
        ]
      },
      {
        id: 'alina',
        name: 'Alina Ridge',
        unit: 'Two-Bed (E703)',
        totalUSD: 91963,
        investors: ['AA', 'HH', 'OG'],
        payments: [
          { type: 'Deposit 40%', month: 'May 2025', amount: 36785, dueDate: new Date(2025, 4, 1), status: 'Fully Paid to Developer', paidBy: { AA: true, HH: true, OG: false } },
          { type: '2nd Payment', month: 'Jun 2025', amount: 9196, dueDate: new Date(2025, 5, 1), status: 'Fully Paid to Developer', paidBy: { AA: true, HH: true, OG: true } },
          { type: '3rd Payment', month: 'Jul 2025', amount: 9196, dueDate: new Date(2025, 6, 1), status: 'Fully Paid to Developer', paidBy: { AA: true, HH: true, OG: true } },
          { type: '4th Payment', month: 'Aug 2025', amount: 9196, dueDate: new Date(2025, 7, 1), status: 'Fully Paid to Developer', paidBy: { AA: true, HH: true, OG: true } },
          { type: '5th Payment', month: 'Sep 2025', amount: 9196, dueDate: new Date(2025, 8, 1), status: 'Pending', paidBy: { AA: true, HH: true, OG: true } },
          { type: '6th Payment', month: 'Oct 2025', amount: 9196, dueDate: new Date(2025, 9, 1), status: 'Pending', paidBy: { AA: false, HH: false, OG: false } },
          { type: '7th Payment', month: 'Nov 2025', amount: 9196, dueDate: new Date(2025, 10, 1), status: 'Pending', paidBy: { AA: false, HH: false, OG: false } }
        ]
      },
      {
        id: 'finsbury',
        name: 'Finsbury Heights',
        unit: 'Two-Bed (12xx)',
        totalUSD: 65000,
        investors: ['AA', 'HH', 'MY', 'OG'],
        payments: [
          { type: 'Deposit 50%', month: 'May 2025', amount: 30000, dueDate: new Date(2025, 4, 1), status: 'Paid', paidBy: { AA: true, HH: true, MY: true, OG: true } },
          { type: '2nd Payment', month: 'Jun 2025', amount: 7000, dueDate: new Date(2025, 5, 1), status: 'Paid', paidBy: { AA: 2300, HH: 2300, MY: 2400, OG: 0 } },
          { type: '3rd Payment', month: 'Jul 2025', amount: 7000, dueDate: new Date(2025, 6, 1), status: 'Pending', paidBy: { AA: false, HH: false, MY: false, OG: false } },
          { type: '4th Payment', month: 'Aug 2025', amount: 7000, dueDate: new Date(2025, 7, 1), status: 'Pending', paidBy: { AA: false, HH: false, MY: false, OG: false } },
          { type: '5th Payment', month: 'Sep 2025', amount: 7000, dueDate: new Date(2025, 8, 1), status: 'Pending', paidBy: { AA: false, HH: false, MY: false, OG: false } },
          { type: '6th Payment', month: 'Oct 2025', amount: 7000, dueDate: new Date(2025, 9, 1), status: 'Pending', paidBy: { AA: false, HH: false, MY: false, OG: false } }
        ]
      },
      {
        id: 'superwestbury',
        name: 'Super-Westbury',
        unit: 'One-Bed+Balcony (1704)',
        totalUSD: 55642,
        investors: ['AA', 'HH', 'MY', 'OG'],
        payments: [
          { type: 'Deposit 1.4%', month: 'Apr 2025', amount: 773, dueDate: new Date(2025, 3, 1), status: 'Fully Paid to Developer', paidBy: { AA: true, HH: true, MY: false, OG: false } },
          { type: '2nd Payment', month: 'May 2025', amount: 10356, dueDate: new Date(2025, 4, 1), status: 'Fully Paid to Developer', paidBy: { AA: true, HH: true, MY: true, OG: true } },
          { type: '3rd Payment', month: 'Sep 2025', amount: 11128, dueDate: new Date(2025, 8, 1), status: 'Pending', paidBy: { AA: false, HH: false, MY: false, OG: false } },
          { type: '4th Payment', month: 'Mar 2026', amount: 11128, dueDate: new Date(2026, 2, 1), status: 'Pending', paidBy: { AA: false, HH: false, MY: false, OG: false } },
          { type: '5th Payment', month: 'Sep 2026', amount: 11128, dueDate: new Date(2026, 8, 1), status: 'Pending', paidBy: { AA: false, HH: false, MY: false, OG: false } },
          { type: '6th Payment', month: 'Dec 2026', amount: 11128, dueDate: new Date(2026, 11, 1), status: 'Pending', paidBy: { AA: false, HH: false, MY: false, OG: false } }
        ]
      },
      {
        id: 'tsavorite',
        name: 'TSavorite Gardens',
        unit: 'Two-Bed (C1502)',
        totalUSD: 74200,
        investors: ['AA', 'HH', 'MY', 'OG'],
        payments: [
          { type: 'Deposit 2.1%', month: 'May 2025', amount: 1547, dueDate: new Date(2025, 4, 1), status: 'Fully Paid to Developer', paidBy: { AA: true, HH: true, MY: false, OG: false } },
          { type: '2nd Payment', month: 'Dec 2025', amount: 5874, dueDate: new Date(2025, 11, 1), status: 'Pending', paidBy: { AA: false, HH: false, MY: false, OG: false } },
          { type: '3rd Payment', month: 'Mar 2026', amount: 16695, dueDate: new Date(2026, 2, 1), status: 'Pending', paidBy: { AA: false, HH: false, MY: false, OG: false } },
          { type: '4th Payment', month: 'Jun 2026', amount: 16695, dueDate: new Date(2026, 5, 1), status: 'Pending', paidBy: { AA: false, HH: false, MY: false, OG: false } },
          { type: '5th Payment', month: 'Sep 2026', amount: 16695, dueDate: new Date(2026, 8, 1), status: 'Pending', paidBy: { AA: false, HH: false, MY: false, OG: false } },
          { type: '6th Payment', month: 'Dec 2026', amount: 16695, dueDate: new Date(2026, 11, 1), status: 'Pending', paidBy: { AA: false, HH: false, MY: false, OG: false } }
        ]
      }
    ];

    const allInvestors = ['AA', 'HH', 'MY', 'OG'];
    const today = new Date();
    const thirtyDaysFromNow = new Date();
    thirtyDaysFromNow.setDate(today.getDate() + 30);

    // Compute upcoming
    const upcoming = {};
    allInvestors.forEach(inv => upcoming[inv] = { total: 0, properties: [] });

    properties.forEach(prop => {
      prop.payments.forEach(pmt => {
        if (pmt.dueDate && pmt.dueDate >= today && pmt.dueDate <= thirtyDaysFromNow) {
          const share = pmt.amount / prop.investors.length;
          prop.investors.forEach(inv => {
            if (!pmt.paidBy[inv] || pmt.paidBy[inv] === false) {
              upcoming[inv].total += share;
              if (!upcoming[inv].properties.includes(prop.name)) {
                upcoming[inv].properties.push(prop.name);
              }
            }
          });
        }
      });
    });

    // Render upcoming cards
    const upcomingContainer = document.getElementById('upcoming-container');
    allInvestors.forEach(inv => {
      const card = document.createElement('div');
      card.className = 'bg-white rounded-lg p-3 border border-yellow-100 investor-card';
      const propNames = upcoming[inv].properties.map(p => p.split(' ')[0]).join(', ');
      card.innerHTML = `
        <div class="flex justify-between items-start">
          <div class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-blue-500 mr-1 lucide lucide-user">
              <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
              <circle cx="12" cy="7" r="4"></circle>
            </svg>
            <span class="font-medium text-gray-800 text-sm">${inv}</span>
          </div>
          <span class="font-bold text-yellow-600 text-sm">$${Math.round(upcoming[inv].total)}</span>
        </div>
        ${propNames ? `<div class="mt-2"><p class="text-[10px] text-gray-600 mb-1">For:</p><p class="text-[10px] text-blue-700">${propNames}</p></div>` : ''}
      `;
      upcomingContainer.appendChild(card);
    });

    // Compute pie chart data
    let totalPaid = 0;
    let totalRemaining = 0;

    properties.forEach(prop => {
      prop.payments.forEach(pmt => {
        const share = pmt.amount / prop.investors.length;
        prop.investors.forEach(inv => {
          if (typeof pmt.paidBy[inv] === 'boolean' && pmt.paidBy[inv]) {
            totalPaid += share;
          } else if (typeof pmt.paidBy[inv] === 'number') {
            totalPaid += pmt.paidBy[inv];
            totalRemaining += (share - pmt.paidBy[inv]);
          } else if (!pmt.paidBy[inv] || pmt.paidBy[inv] === false) {
            totalRemaining += share;
          }
        });
      });
    });

    document.getElementById('total-text').textContent = `Total: $${(totalPaid + totalRemaining).toLocaleString()}`;

    // Render pie chart
    const ctx = document.getElementById('paymentPieChart').getContext('2d');
    new Chart(ctx, {
      type: 'pie',
      data: {
        labels: ['Paid', 'Remaining'],
        datasets: [{
          data: [totalPaid, totalRemaining],
          backgroundColor: ['#10B981', '#EF4444'],
          borderWidth: 0
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: false },
          tooltip: {
            callbacks: {
              label: (item) => `$${item.raw.toLocaleString()}`
            }
          }
        }
      }
    });

    // Render property tables
    const propsContainer = document.getElementById('properties-container');
    properties.forEach(prop => {
      const card = document.createElement('div');
      card.className = 'bg-white rounded-lg overflow-hidden border';
      card.innerHTML = `
        <div class="p-3 cursor-pointer hover:bg-gray-50" onclick="toggleTable('${prop.id}')">
          <div class="flex justify-between">
            <div class="min-w-0">
              <h3 class="font-semibold text-gray-900 text-sm truncate">${prop.name}</h3>
              <p class="text-xs text-gray-600 truncate">${prop.unit}</p>
            </div>
            <span class="text-xs bg-blue-100 text-blue-800 px-2 py-0.5 rounded-full">${prop.investors.length} inv</span>
          </div>
        </div>
        <div id="table-${prop.id}" class="hidden border-t border-gray-100 p-3">
          <div class="scrollable-table -mx-3 px-3">
            <table class="w-full min-w-[550px] text-xs">
              <thead>
                <tr class="bg-gray-50 text-left text-gray-500">
                  <th class="py-2 px-2 font-medium">Payment</th>
                  <th class="py-2 px-2 font-medium">Due Date</th>
                  <th class="py-2 px-2 font-medium">Amount ($)</th>
                  <th class="py-2 px-2 font-medium">Status</th>
                  ${prop.investors.map(inv => `<th class="py-2 px-2 font-medium text-center">${inv}</th>`).join('')}
                </tr>
              </thead>
              <tbody>
                ${prop.payments.map(pmt => {
                  const isDueSoon = pmt.dueDate && pmt.dueDate >= today && pmt.dueDate <= thirtyDaysFromNow;
                  const rowClass = isDueSoon ? 'bg-yellow-50' : 'border-b border-gray-100';
                  const dueStr = pmt.month || (pmt.dueDate?.toLocaleDateString() || 'N/A');
                  const statusClass = pmt.status.includes('Paid') ? 'text-green-600' : (isDueSoon ? 'text-yellow-600' : 'text-gray-500');
                  const statusIcon = pmt.status.includes('Paid') ? 
                    '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-green-500 w-4 h-4"><polyline points="20 6 9 17 4 12"></polyline></svg>' :
                    (isDueSoon ? 
                      '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-yellow-500 w-4 h-4"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>' :
                      '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-gray-400 w-4 h-4"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>'
                    );
                  const investorCells = prop.investors.map(inv => {
                    if (typeof pmt.paidBy[inv] === 'boolean') {
                      return pmt.paidBy[inv] ? 
                        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-green-500 w-4 h-4 mx-auto"><polyline points="20 6 9 17 4 12"></polyline></svg>' :
                        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-red-500 w-4 h-4 mx-auto"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>';
                    } else if (typeof pmt.paidBy[inv] === 'number') {
                      return `<span class="text-green-600">$${pmt.paidBy[inv]}</span>`;
                    } else {
                      return '<span class="text-gray-400">—</span>';
                    }
                  }).join('');
                  return `
                    <tr class="${rowClass}">
                      <td class="py-2 px-2 font-medium text-gray-900">${pmt.type}</td>
                      <td class="py-2 px-2 text-gray-600">${dueStr}</td>
                      <td class="py-2 px-2 font-medium">$${pmt.amount.toLocaleString()}</td>
                      <td class="py-2 px-2">
                        <div class="flex items-center">
                          ${statusIcon}
                          <span class="ml-1 ${statusClass}">${pmt.status}</span>
                        </div>
                      </td>
                      ${investorCells}
                    </tr>
                  `;
                }).join('')}
              </tbody>
            </table>
          </div>
        </div>
      `;
      propsContainer.appendChild(card);
    });

    window.toggleTable = function(id) {
      const el = document.getElementById(`table-${id}`);
      el.classList.toggle('hidden');
    };
  </script>
</body>
</html>

